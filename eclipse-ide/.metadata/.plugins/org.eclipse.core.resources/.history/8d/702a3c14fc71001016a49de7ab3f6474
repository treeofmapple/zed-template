package com.tom.front.full.service;

import java.util.Random;
import java.util.stream.Collectors;

import org.springframework.stereotype.Component;

import com.tom.front.full.model.Employee;
import com.tom.front.full.repository.EmployeeRepository;

import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class EmployeeUtils {

	private final int MAX_RETRIES = 10;
	private final EmployeeRepository repository;
	
	public Employee findById(long query) {
		return repository.findById(query).orElseThrow(() -> {
			throw new RuntimeException("");
		});
	}

	public void ensureNameAreUnique(String name) {
		if (repository.existsByName(name)) {
			throw new RuntimeException("Already Exists");
		}
	}

	public void checkIfNameIsTaken(Employee currentEmployee, String name) {
		if (!currentEmployee.getName().equalsIgnoreCase(name)) {
			if (repository.existsByNameAndIdNot(name, currentEmployee.getId())) {
				throw new RuntimeException("");
			}
		}
	}

	public String generateEmployeeCode() {
		final String ALLOWED_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
		final int codeLength = 8;
		Random random = new Random();
		int attempt = 0;
		
		String generatedCode;

		do {
	        if (attempt >= MAX_RETRIES) {
	            throw new RuntimeException("Failed to generate a unique employee code after " + MAX_RETRIES + " attempts.");
	        }
	        
	        generatedCode = random.ints(codeLength, 0, ALLOWED_CHARACTERS.length())
	                .mapToObj(ALLOWED_CHARACTERS::charAt)
	                .map(Object::toString)
	                .collect(Collectors.joining());

	        attempt++;
	    } while (repository.existsByEmployeeCode(generatedCode)); // Loop as long as the code exists

		
		return generatedCode;
	}

}
