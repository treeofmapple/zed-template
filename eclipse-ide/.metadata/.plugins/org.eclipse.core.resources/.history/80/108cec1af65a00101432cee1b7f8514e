package com.tom.service.knowledges.attachments;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-04T02:05:40-0300",
    comments = "version: 1.6.2, compiler: javac, environment: Java 21.0.7 (BellSoft)"
)
@Component
public class AttachmentMapperImpl implements AttachmentMapper {

    @Override
    public AttachmentResponse toResponse(Attachment image) {
        if ( image == null ) {
            return null;
        }

        String name = null;
        String objectUrl = null;
        String contentType = null;
        Long size = null;
        LocalDateTime createdAt = null;
        LocalDateTime updatedAt = null;

        name = image.getName();
        objectUrl = image.getObjectUrl();
        contentType = image.getContentType();
        size = image.getSize();
        createdAt = image.getCreatedAt();
        updatedAt = image.getUpdatedAt();

        AttachmentResponse attachmentResponse = new AttachmentResponse( name, objectUrl, contentType, size, createdAt, updatedAt );

        return attachmentResponse;
    }

    @Override
    public Set<AttachmentResponse> toResponseSet(Set<Attachment> attachments) {
        if ( attachments == null ) {
            return null;
        }

        Set<AttachmentResponse> set = LinkedHashSet.newLinkedHashSet( attachments.size() );
        for ( Attachment attachment : attachments ) {
            set.add( toResponse( attachment ) );
        }

        return set;
    }

    @Override
    public List<AttachmentResponse> toResponseList(List<Attachment> attachments) {
        if ( attachments == null ) {
            return null;
        }

        List<AttachmentResponse> list = new ArrayList<AttachmentResponse>( attachments.size() );
        for ( Attachment attachment : attachments ) {
            list.add( toResponse( attachment ) );
        }

        return list;
    }

    @Override
    public void mergeFromMultipartFile(Attachment attachment, MultipartFile file, String key, String url) {
        if ( file == null && key == null && url == null ) {
            return;
        }

        if ( file != null ) {
            if ( file.getOriginalFilename() != null ) {
                attachment.setName( file.getOriginalFilename() );
            }
            if ( file.getContentType() != null ) {
                attachment.setContentType( file.getContentType() );
            }
            attachment.setSize( file.getSize() );
        }
        if ( key != null ) {
            attachment.setObjectKey( key );
        }
        if ( url != null ) {
            attachment.setObjectUrl( url );
        }
    }

    @Override
    public void mergeFromKeyAndUrl(Attachment attachment, String key, String url) {
        if ( key == null && url == null ) {
            return;
        }

        if ( key != null ) {
            attachment.setObjectKey( key );
        }
        if ( url != null ) {
            attachment.setObjectUrl( url );
        }
    }
}
