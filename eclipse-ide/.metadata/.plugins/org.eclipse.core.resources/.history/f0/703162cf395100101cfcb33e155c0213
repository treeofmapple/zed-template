package com.tom.front.basic.common;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.regex.Pattern;

import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import jakarta.servlet.http.HttpServletRequest;

@Component
public class SystemUtils {

	public String getInternalIp() {
		var request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();
		return request.getRemoteAddr();	
	}
	
	public String getRequesterIp(HttpServletRequest request) {
		return request.getRemoteAddr();	
	}

	public String getPublicIp() throws IOException {
		return null;
	}

	public long parseDurationMiroseconds(String duration) {
		long millis = 0L;
		String regex = "(\\d+)([smhdwSMHDW])";
		var matcher = Pattern.compile(regex).matcher(duration);
		while (matcher.find()) {
			long value = Long.parseLong(matcher.group(1));
			switch (matcher.group(2).toUpperCase()) {
			case "S" -> millis += value * 1000;
			case "M" -> millis += value * 60 * 1000;
			case "H" -> millis += value * 60 * 60 * 1000;
			case "D" -> millis += value * 24 * 60 * 60 * 1000;
			case "W" -> millis += value * 7 * 24 * 60 * 60 * 1000;
			default -> throw new IllegalArgumentException("Invalid time unit in duration: " + matcher.group(2));
			}
		}
		return millis;
	}

	public long parseDurationSeconds(String duration) {
		long millis = 0L;
		String regex = "(\\d+)([smhdwSMHDW])";
		var matcher = Pattern.compile(regex).matcher(duration);
		while (matcher.find()) {
			long value = Long.parseLong(matcher.group(1));
			switch (matcher.group(2).toUpperCase()) {
			case "S" -> millis += value ; 
			case "M" -> millis += value * 60 ;
			case "H" -> millis += value * 60 * 60 ;
			case "D" -> millis += value * 24 * 60 * 60 ;
			case "W" -> millis += value * 7 * 24 * 60 * 60 ;
			default -> throw new IllegalArgumentException("Invalid time unit in duration: " + matcher.group(2));
			}
		}
		return millis;
	}
	
	protected void getBannerPathResource(PrintStream out) {
		ClassPathResource resource = new ClassPathResource("banner/banner.txt");
		try (BufferedReader reader = new BufferedReader(
				new InputStreamReader(resource.getInputStream(), StandardCharsets.UTF_8))) {
			String line;
			while ((line = reader.readLine()) != null) {
				out.println(line);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
