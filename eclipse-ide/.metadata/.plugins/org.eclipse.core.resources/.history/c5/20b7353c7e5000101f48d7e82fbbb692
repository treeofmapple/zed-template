package server.util;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class MultiThread extends MultiOperations implements Runnable {

	public MultiThread(int port) {
		this.serverPort = port;
	}
	
	@Override
	public void run() {
            this.runningThread = Thread.currentThread();
        }
	
        openServerSocket();
        while(!IsStopped()){
            Socket clientSocket = null;
            try {
                clientSocket = this.serverSocket.accept();
            } catch (IOException e) {
                if(IsStopped()) {
                    System.out.println("Server Stopped.") ;
                    return;
                }
                throw new RuntimeException(
                    "Error accepting client connection", e);
            }
            new Thread(
                new WorkerRunnable(
                    clientSocket, "Multithreaded Server")
            ).start();
        }
        System.out.println("Server Stopped.") ;
		
}
		
	}
	
}

class MultiVariables {
	
	protected int serverPort = 8080;
	protected ServerSocket serverSocket = null;
	protected boolean isStopped = false;
	protected Thread runningThread = null;
	protected String serverText = null;
	
}


class MultiOperations extends MultiVariables {
	
	public void processClientRequest(Socket clientSocket) throws Exception {
        InputStream input  = clientSocket.getInputStream();
        OutputStream output = clientSocket.getOutputStream();
        long time = System.currentTimeMillis();

        output.write(("HTTP/1.1 200 OK\n\nWorkerRunnable: " +
		this.serverText + " - " + time + "").getBytes());
        output.close();
        input.close();
        System.out.println("Request processed: " + time);
	}
	
	protected void openServerSocket() {
		try {
			this.serverSocket = new ServerSocket(this.serverPort);
		} catch(IOException e) {
			throw new RuntimeException("Cannot open port " + serverPort, e);
		}
	}
	
	public synchronized void stop() {
		this.isStopped = true;
		try {
			this.serverSocket.close();
		} catch(IOException e) {
			throw new RuntimeException("Error closing server", e);
		}
	}
	
	public synchronized boolean IsStopped() {
		return this.isStopped;
	}
}
