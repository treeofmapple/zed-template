package com.tom.front.basic.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.tom.front.basic.dto.BookPageResponse;
import com.tom.front.basic.dto.BookRequest;
import com.tom.front.basic.dto.BookResponse;
import com.tom.front.basic.dto.UpdateRequest;
import com.tom.front.basic.service.BookService;

import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/v1/books")
@RequiredArgsConstructor
public class BookController {

	private final BookService service;
	
	@GetMapping(value = "/search/all",
			produces = MediaType.APPLICATION_JSON_VALUE
			)
	public ResponseEntity<BookPageResponse> findAllBooks(
			@RequestParam(defaultValue = "0") int value
			
			) {
		var response = service.findAllBooks(value);
		return ResponseEntity.status(HttpStatus.OK).body(response);
	}
	
	@GetMapping(value = "/search/all",
			produces = MediaType.APPLICATION_JSON_VALUE
			)
	public ResponseEntity<BookPageResponse> findBookByTitle(
			@RequestParam(defaultValue = "0") int value
			
			) {
		var response = service.findAllBooks(value);
		return ResponseEntity.status(HttpStatus.OK).body(response);
	}
	
	@GetMapping(value = "/search/all",
			produces = MediaType.APPLICATION_JSON_VALUE
			)
	public ResponseEntity<BookPageResponse> findAllBooks(
			@RequestParam(defaultValue = "0") int value
			
			) {
		var response = service.findAllBooks(value);
		return ResponseEntity.status(HttpStatus.OK).body(response);
	}
	
	@GetMapping(value = "/search/all",
			produces = MediaType.APPLICATION_JSON_VALUE
			)
	public ResponseEntity<BookPageResponse> findAllBooks(
			@RequestParam(defaultValue = "0") int value
			
			) {
		var response = service.findAllBooks(value);
		return ResponseEntity.status(HttpStatus.OK).body(response);
	}
	
	@PostMapping(value = "/create",
			consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<BookResponse> createBook(
			@RequestBody BookRequest request,
			HttpServletRequest httpRequest
			) {
		var response = service.createBook(request, httpRequest);
		return ResponseEntity.status(HttpStatus.CREATED).body(response);
	}
	
	@PostMapping(value = "/update/isbn",
		consumes = MediaType.APPLICATION_JSON_VALUE,
		produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<BookResponse> updateIsbn(
		@RequestParam long id, 
		HttpServletRequest httpRequest
		) {
		var response = service.updateIsbn(id, httpRequest);
		return ResponseEntity.status(HttpStatus.OK).body(response);
	}

	
	@PutMapping(value = "/update/book",
			consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<BookResponse> updateBook(
			@RequestParam long id, 
			UpdateRequest request,
			HttpServletRequest httpRequest
			) {
		var response = service.editBook(id, request, httpRequest);
		return ResponseEntity.status(HttpStatus.OK).body(response);
	}
	
	@DeleteMapping(value = "/remove")
	public ResponseEntity<Void> deleteBook(
			@RequestParam long id, 
			HttpServletRequest httpRequest
			) {
		service.deleteBook(id, httpRequest);
		return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
	}
	
}
