package com.tom.front.basic.service;

import java.time.LocalDate;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.tom.front.basic.common.IsbnGenerator;
import com.tom.front.basic.common.ServiceLogger;
import com.tom.front.basic.common.SystemUtils;
import com.tom.front.basic.dto.BookPageResponse;
import com.tom.front.basic.dto.BookRequest;
import com.tom.front.basic.dto.BookResponse;
import com.tom.front.basic.dto.UpdateRequest;
import com.tom.front.basic.mapper.BookMapper;
import com.tom.front.basic.model.Book;
import com.tom.front.basic.repository.BookRepository;
import com.tom.front.basic.repository.BookSpecification;

import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class BookService {

	@Value("${application.page.size:10}")
	private int PAGE_SIZE;

	private final ConcurrentHashMap<String, Object> creationLock = new ConcurrentHashMap<>();

	private final BookRepository repository;
	private final BookMapper mapper;
	private final BookUtils bookUtils;
	private final SystemUtils utils;
	private final IsbnGenerator isbnGenerator; // Core
												// Logic

	@Transactional(readOnly = true)
	public BookPageResponse findBookByParams(int page, String title, String author, LocalDate startDate,
			LocalDate endDate, HttpServletRequest httpRequest) {
		String userIp = utils.getRequestingClientIp(httpRequest);
		ServiceLogger.info("IP {}", userIp);

		Specification<Book> spec = BookSpecification.findByCriteria(title, author, startDate, endDate);

		Pageable pageable = PageRequest.of(page, PAGE_SIZE);
		Page<Book> books = repository.findAll(spec, pageable);
		return mapper.toBookPageResponse(books);
	}

	@Transactional
	public BookResponse createBook(BookRequest request, HttpServletRequest httpRequest) {
		String userIp = utils.getRequestingClientIp(httpRequest);
		ServiceLogger.info("IP {}", userIp);
		Object lock = creationLock.computeIfAbsent("NONE", k -> new Object());
		
		// generate isbn 
		synchronized (lock) {
			try {

				return mapper.toResponse(null);
			} finally {
				creationLock.remove("NONE");
			}
		}
	}

	@Transactional
	public BookResponse editBook(long id, UpdateRequest request, HttpServletRequest httpRequest) {
		String userIp = utils.getRequestingClientIp(httpRequest);
		ServiceLogger.info("IP {}", userIp);

		return null;
	}

	@Transactional
	public BookResponse updateIsbn(long id, HttpServletRequest httpRequest) {
		String userIp = utils.getRequestingClientIp(httpRequest);
		ServiceLogger.info("IP {}", userIp);
		String ab = isbnGenerator.generateIsbn13("978", "1");
		// delete anterior generate a new one and
		// insert the new one

		return null;
	}

	@Transactional
	public void deleteBook(long id, HttpServletRequest httpRequest) {
		String userIp = utils.getRequestingClientIp(httpRequest);
		ServiceLogger.info(null);

	    if (!repository.existsById(id)) {
	        // Throw a specific exception that your GlobalExceptionHandler can turn into a 404 response.
	        throw new ResourceNotFoundException("Cannot delete. Book not found with id: " + id);
	    }
		
		var toRemove = bookUtils.ensureExistsAndGet(userIp);
		repository.deleteById(id);
		
		ServiceLogger.info(null);
	}

}
